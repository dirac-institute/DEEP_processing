description: |
  The DRP pipeline specialized for the DECam instrument, developed against the
  DEEP dataset.
imports:
  - ${DRP_PIPE_DIR}/pipelines/DECam/DRP-Merian.yaml

tasks:
  calibrate:
    class: lsst.pipe.tasks.calibrate.CalibrateTask 
    config: 
      astromRefObjLoader.anyFilterMapsToThis: "phot_g_mean" # gaia refcats flux columns are phot_g_mean_flux, phot_bp_mean_flux, phot_rp_mean_flux # https://www.cosmos.esa.int/web/gaia/iow_20180316
      photoRefObjLoader.filterMap:
        VR: "r" # ps1 refcats flux columns are g_flux, r_flux, i_flux, z_flux, y_flux # https://outerspace.stsci.edu/display/PANSTARRS/PS1+Filter+properties
      photoCal.applyColorTerms: false # Applying color terms for filter='VR DECam c0007 6300.0 2600.0', config.photoCatName=ps1_pv3_3pi_20170110 because config.applyColorTerms is True 
      python: |
        config.computeSummaryStats.fiducialSkyBackground.update(dict(VR=1))
        config.computeSummaryStats.fiducialPsfSigma.update(dict(VR=1))
        config.computeSummaryStats.fiducialZeroPoint.update(dict(VR=25.0))
  
  partitionFakes:
    class: deep.tasks.partitionFakes.PartitionFakesTask

  inject_visit:
    class: lsst.source.injection.inject_visit.VisitInjectTask
    config:
      external_psf: false
      external_photo_calib: false
      external_wcs: false
      connections.input_exposure: calexp
      connections.output_exposure: injected_calexp
      connections.output_catalog: injected_calexp_catalog
      selection: |
        np.isin(injection_catalog['EXPNUM'], {visit}) # select on visit

  insertFakes:
    class: lsst.pipe.tasks.processCcdWithFakes.ProcessCcdWithFakesTask
    config:
      connections.fakeCats: DEEP_fakes_partitioned
      connections.fakesType: "fakes_"
      doMatchVisit: true
      insertFakes.insertOnlyStars: true
      insertFakes.doProcessAllDataIds: true

  isolatedStarAssociation:
    class: lsst.pipe.tasks.isolatedStarAssociation.IsolatedStarAssociationTask
    config:
      python:
        config.band_order += ["VR"]

  jointcal:
    class: lsst.jointcal.JointcalTask
    config:
      connections.astrometryRefCat: gaia_dr3_20230707
      astrometryRefObjLoader.anyFilterMapsToThis: phot_g_mean
      photometryRefObjLoader.filterMap:
        VR: "r"
      astrometryOutlierRelativeTolerance: 0.002 # faster convergence: default=0; Convergence tolerance for outlier rejection threshold
      allowLineSearch: true # for photometry
      applyColorTerms: false # No colorterm found for filter 'VR DECam c0007 6300.0 2600.0' with photoCatName 'ps1_pv3_3pi_20170110' = catalog 'ps1*'
  
  consolidateVisitSummary: 
    class: lsst.pipe.tasks.postprocess.ConsolidateVisitSummaryTask
    config:
      connections.calexp: "fakes_calexp"

  selectVisits:
    class: deep.tasks.selectVisits.SelectVisitsTask
    config:
      mode: "all"

  makeWarp:
    class: lsst.pipe.tasks.makeWarp.MakeWarpTask
    config:
      doApplySkyCorr: false
      doApplyExternalSkyWcs: false # requires finalVisitSummary input
      doApplyExternalPhotoCalib: false # requires finalVisitSummary input
      doApplyFinalizedPsf: false # requires finalVisitSummary input
      connections.visitSummary: visitSummary
      connections.calexpType: "fakes_"
      useVisitSummaryPsf: false # the visitSummary doesn't have a PSF associated, would need to run FinalizeCharacterizationTask I believe with an isolated star catalog; use the exposure PSF instead
      hasFakes: true

  templateGen:
    class: lsst.drp.tasks.assemble_coadd.CompareWarpAssembleCoaddTask
    config:
      doSelectVisits: false
      assembleStaticSkyModel.doSelectVisits: false
      statistic: MEANCLIP
      subregionSize: (2000, 100)
      assembleStaticSkyModel.subregionSize: (2000, 100)

  getTemplate:
    class: lsst.ip.diffim.getTemplate.GetTemplateTask
    config:
      connections.fakesType: "fakes_"

  subtractImages:
    class: lsst.ip.diffim.subtractImages.AlardLuptonSubtractTask
    config:
      connections.fakesType: "fakes_"
      connections.difference: "differenceExp"

contracts:
  - templateGen.connections.coaddExposure == getTemplate.connections.coaddExposures
  - getTemplate.connections.template == subtractImages.connections.template

subsets:
  step1:
    subset:
    - isr
    - characterizeImage
    - calibrate
  
  step2:
    subset:
    - inject_visit
  step3:
    subset:
    - consolidateVisitSummary
  step4:
    subset:
    - makeWarp
  step5:
    subset:
    - templateGen
  step6:
    subset:
    - getTemplate
    - subtractImages
 
  # warps:
  #   subset:
  #   - makeWarp
  #   - makeWarpFakes
  # visits:
  #   subset:
  #   - selectVisits
  # templates:
  #   subset:
  #   - templateGen
  #   - getTemplate
  # step3:
  #   subset:
  #   - makeWarp
  #   - selectGoodSeeingVisits
  #   - deepSelectVisits
  #   - templateGenDeepClippedMean
  #   - templateGenDeepMedian
  #   - templateGenGoodSeeingClippedMean
  #   - templateGenGoodSeeingMedian
  #   - templateGenDEEPSelectedMedian
  #   - templateGenDEEPSelectedClippedMean
  #   - getTemplateDeepClippedMean
  #   - getTemplateDeepMedian
  #   - getTemplateGoodSeeingClippedMean
  #   - getTemplateGoodSeeingMedian
  #   - getTemplateDEEPSelectedMedian
  #   - getTemplateDEEPSelectedClippedMean
  # step3NoFakes:
  #   subset:
  #   - makeWarpNoFakes
  #   - selectGoodSeeingVisits
  #   - deepSelectVisits
  #   - templateGenDeepClippedMean
  #   - templateGenDeepMedian
  #   - templateGenGoodSeeingClippedMean
  #   - templateGenGoodSeeingMedian
  #   - templateGenDEEPSelectedMedian
  #   - templateGenDEEPSelectedClippedMean
  #   - getTemplateDeepClippedMean
  #   - getTemplateDeepMedian
  #   - getTemplateGoodSeeingClippedMean
  #   - getTemplateGoodSeeingMedian
  #   - getTemplateDEEPSelectedMedian
  #   - getTemplateDEEPSelectedClippedMean
  # step4:
  #   - subtractImagesDeepClippedMean
  #   - subtractImagesDeepMedian
  #   - subtractImagesGoodSeeingClippedMean
  #   - subtractImagesGoodSeeingMedian
  #   - subtractImagesDEEPSelectedMedian
  #   - subtractImagesDEEPSelectedClippedMean
  # coaddition:
  #   subset:
  #   - makeWarp
  #   - assembleCoadd
  # coaddDeepAndGood:
  #   subset:
  #   - makeWarp
  #   - assembleCoadd
  #   - selectGoodSeeingVisits
  #   - templateGen
  #   - getTemplate
  # templates:
  #   subset:
  #   - makeWarp
  #   - selectGoodSeeingVisits
  #   - templateGen
  #   - getTemplate
  # diffim:
  #   subset:
  #   - subtractImages
